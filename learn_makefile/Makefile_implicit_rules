# IMPLICIT RULES

# Compiling a C program:
# n.o is made automatically from n.c with a command of the form
# $(CC) -c $(CPPFLAGS) $(CFLAGS) $^ -o $@

# Compiling a C++ program:
# n.o is made automatically from n.cc or n.cpp with a command of the form
# $(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $^ -o $@

# Linking a single object file:
# n is made automatically from n.o by running the command
# $(CC) $(LDFLAGS) $^ $(LOADLIBES) $(LDLIBS) -o $@

# The important variables used by implicit rules are:

# CC : Program for compiling C programs; dafault cc
# CXX : Program for compiling C++ programs; default g++
# CFLAGS : Extra flags to give to the C compiler
# CXXFLAGS : Extra flags to give to the C++ compiler
# CPPFLAGS  Extra flags to give to the C preprocessor
# LDFLAGS :	Extra flags to give to compilers when they are suppoed to invoke the linker

# Две строчки ниже можно закомментить
# потому что это implicit rules:
# CC = gcc # flag for implicit rules
# CFLAGS = -g -Wall -Wextra -Werror

# Implicit rule #1: blah is built via the C linker implicit rule
# Implicit rule #2: blah.o is built via the C compilation implicit rule, because blah.c exists

blah: blah.o

blah.c:
	echo "int main() { return 0; }" > blah.c

clean:
	rm -f blah blah.o blah.c